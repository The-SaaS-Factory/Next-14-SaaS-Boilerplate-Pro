generator client {
  provider = "prisma-client-js"
}

// datasource db {
// provider  = "postgresql"
// url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
// directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------SaaS Core--------------------------------------------
model User {
  id              Int              @id @default(autoincrement())
  name            String
  password        String?
  phone           String?
  email           String?          @unique @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userMemberships UserMembership[]
  Permission      Permission[]
}

model UserMembership {
  id                    Int                     @id @default(autoincrement())
  userId                Int
  organizationId        Int
  role                  UserMembershipRole      @default(ADMIN)
  permissions           Permission[]
  isActive              Boolean                 @default(true)
  user                  User                    @relation(fields: [userId], references: [id])
  organization          Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  settings UserMembershipSetting[]

  @@index([organizationId])
}

model UserMembershipSetting {
  id               Int            @id @default(autoincrement())
  userMembershipId Int
  settingName      String
  settingValue     String
  userMembership   UserMembership @relation(fields: [userMembershipId], references: [id], onDelete: Cascade)

  @@index([userMembershipId])
}

enum UserMembershipRole {
  ADMIN
  MEMBER
}

model Organization {
  id                       Int                        @id @default(autoincrement())
  email                    String?                    @db.VarChar(255)
  name                     String?                    @db.VarChar(255)
  isMainTenant             Boolean                    @default(false)
  status                   OrganizationStatus         @default(ACTIVE)
  address                  String?                    @db.VarChar(512)
  phone                    String?                    @db.VarChar(32)
  avatar                   String?                    @db.VarChar(255)
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  refer                    Referral[]                 @relation("refer")
  referredBy               Referral[]                 @relation("referred")
  notification             Notification[]
  membership               Membership[]
  supportTicket            SupportTicket[]
  supportTicketMessage     SupportTicketMessage[]
  stripeCustomer           StripeCustomer[]
  coupons                  Coupon[]
  invoices                 Invoice[]                  @relation("InvoiceProfile")
  invoicesUser             Invoice[]                  @relation("InvoiceProfileUser")
  logs                     Log[]
  userMemberships          UserMembership[]
  organizationCapabilities OrganizationCapabilities[]
  settings                 OrganizationSetting[]
  organizationPlugin       OrganizationPlugin[]
  permissions              Permission[]
}

model OrganizationSetting {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  settingName    String       @db.VarChar(128)
  settingValue   String       @db.Text

  @@index([organizationId])
}

enum OrganizationStatus {
  ACTIVE
  INACTIVE
  PENDING
  DELETED
}

// ---------------------------------------End SaaS Core-------------------------------------------

// -------------------------------------- Modules ------------------------------------------------
// -------- Module Log
model Log {
  id             Int          @id @default(autoincrement())
  organizationId Int
  action         LogAction
  changes        Json
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
}

enum LogAction {
  CREATE
  UPDATE
  DELETE
}

// -------- Module Plugin           
model Plugin {
  id              Int                   @id @default(autoincrement())
  name            String
  slug            String                @unique
  description     String?
  developer       String?
  customComponent String?
  logo            String?
  version         String
  status          Status                @default(INACTIVE)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  configurations  PluginConfiguration[]
  installations   OrganizationPlugin[]
}

model OrganizationPlugin {
  id             Int          @id @default(autoincrement())
  organizationId Int
  pluginId       Int
  configuration  Json?
  installedAt    DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plugin         Plugin       @relation(fields: [pluginId], references: [id], onDelete: Cascade)
}

model PluginConfiguration {
  id           Int      @id @default(autoincrement())
  pluginId     Int
  key          String   @unique
  name         String
  required     Boolean  @default(false)
  valueType    String
  defaultValue String?
  note         String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id])
}

// -------- Module Stripe    

model StripeCustomer {
  id             Int          @id @default(autoincrement())
  customerId     String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

// -------- Module Invoice    
model Invoice {
  id                     Int              @id @default(autoincrement())
  organizationId         Int?
  type                   InvoiceModelType @default(MEMBERSHIP)
  membershipId           Int?
  orderId                Int?
  subtotal               Float
  totalDiscount          Float?
  tax                    Float?
  total                  Float
  totalFinal             Float?
  userId                 Int?
  serviceId              Int?
  status                 InvoiceStatus    @default(PENDING)
  currencyId             Int              @default(1)
  userCustomerExternalId String?          @db.VarChar(512)
  gateway                String?          @db.VarChar(56)
  gatewayId              String?          @db.VarChar(512)
  details                String?          @db.VarChar(512)
  invoiceUrl             String?          @db.VarChar(512)
  invoicePdfUrl          String?          @db.VarChar(512)
  subscriptionExternalId String?          @db.VarChar(512)
  paidAt                 DateTime?
  notifiedAt             DateTime?
  dueAt                  DateTime?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  Currency               AdminCurrencies  @relation(fields: [currencyId], references: [id])
  Items                  InvoiceItem[]
  coupons                Coupon[]
  user                   Organization?    @relation("InvoiceProfileUser", fields: [userId], references: [id], onDelete: Cascade)
  organization           Organization?    @relation("InvoiceProfile", fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, currencyId, serviceId])
}

model InvoiceItem {
  id          Int      @id @default(autoincrement())
  invoiceId   Int
  name        String
  description String?
  modelType   String?
  tax         Float?
  modelId     Int?
  pricingBdId Int?
  pricingId   String?
  images      String?  @db.Text
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
}

// -------- Module Invoice Coupon
model Coupon {
  id                Int              @id @default(autoincrement())
  organizationId    Int?
  name              String
  code              String           @unique
  amountOff         Float?
  duration          CouponDuration   @default(FOREVER)
  durationInMonths  Int?
  maxRedemptions    Int?
  percentOff        Float?
  status            String           @default("ACTIVE")
  organization      Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  AdminCurrencies   AdminCurrencies? @relation(fields: [adminCurrenciesId], references: [id])
  adminCurrenciesId Int?
  settings          CouponSettings[]
  invoices          Invoice[]

  @@index([organizationId])
}

model CouponSettings {
  id        Int      @id @default(autoincrement())
  couponId  Int
  coupon    Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  name      String
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([couponId])
}

enum CouponDuration {
  FOREVER
  ONCE
  REPEATING
}

// -------- Module Payment
model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  currencies  String?  @db.Text
  status      String   @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// -------- Module Membership (for Organizations)
model Membership {
  id               Int              @id @default(autoincrement())
  organizationId   Int              @unique
  plan             Plan             @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId           Int
  pricingId        Int?
  pricing          Pricing?         @relation(fields: [pricingId], references: [id], onDelete: Cascade)
  currencyId       Int?             @default(1)
  currency         AdminCurrencies? @relation(fields: [currencyId], references: [id])
  startDate        DateTime
  endDateFreeTrial DateTime?
  endDate          DateTime
  createdAt        DateTime         @default(now())
  organization     Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId, pricingId])
}

model Plan {
  id               Int                @id @default(autoincrement())
  name             String
  stripeProductId  String?
  freeTrialDays    Int?
  status           String             @default("ACTIVE")
  description      String?            @db.Text
  Membership       Membership[]
  PlanCapabilities PlanCapabilities[]
  Permission       Permission[]
  pricing          Pricing[]
}

model Capabilitie {
  id               Int                        @id @default(autoincrement())
  name             String
  title            String?
  description      String?                    @db.Text
  type             String                     @default("LIMIT")
  PlanCapabilities PlanCapabilities[]
  UserCapabilities OrganizationCapabilities[]
}

model PlanCapabilities {
  id            Int         @id @default(autoincrement())
  capabilitieId Int
  planId        Int
  count         Int
  name          String?
  plan          Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  capabilitie   Capabilitie @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)

  @@index([planId, capabilitieId])
}

model OrganizationCapabilities {
  id             Int          @id @default(autoincrement())
  capabilitieId  Int
  organizationId Int
  count          Int
  user           Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  capabilitie    Capabilitie  @relation(fields: [capabilitieId], references: [id], onDelete: Cascade)

  @@index([organizationId, capabilitieId])
}

model Pricing {
  id         Int              @id @default(autoincrement())
  frequency  frequencyType    @default(YEARLY)
  status     String           @default("ACTIVE")
  price      Float
  oldPrice   Float?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  Plan       Plan?            @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId     Int?
  serviceId  Int?
  settings   PricingSetting[]
  Membership Membership[]

  @@index([planId, serviceId])
}

model PricingSetting {
  id           Int      @id @default(autoincrement())
  settingName  String
  settingValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Pricing      Pricing? @relation(fields: [pricingId], references: [id])
  pricingId    Int?

  @@index([pricingId])
}

//------- Module Permission
model Permission {
  id               Int             @id @default(autoincrement())
  name             String
  description      String
  UserMembership   UserMembership? @relation(fields: [userMembershipId], references: [id])
  userMembershipId Int?
  Plan             Plan?           @relation(fields: [planId], references: [id])
  planId           Int?
  User             User?           @relation(fields: [userId], references: [id])
  userId           Int?
  Organization     Organization?   @relation(fields: [organizationId], references: [id])
  organizationId   Int?
}

//------- Module Affiliates

model Referral {
  id         Int          @id @default(autoincrement())
  refer      Organization @relation("refer", fields: [referId], references: [id], onDelete: Cascade)
  referId    Int
  referred   Organization @relation("referred", fields: [referredId], references: [id])
  referredId Int

  @@index([referId, referredId])
}

model SuperAdminSetting {
  id           Int    @id @default(autoincrement())
  settingName  String @db.VarChar(128)
  settingValue String @db.Text
}

model CronJobs {
  id        Int      @id @default(autoincrement())
  name      String
  error     String?  @db.Text
  excuteAt  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id             Int              @id @default(autoincrement())
  organizationId Int
  content        String
  image          String
  viewed         Boolean          @default(false)
  type           NotificationType
  createdAt      DateTime         @default(now())
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
}

model AdminCurrencies {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(56)
  main       Int          @default(0)
  code       String       @db.VarChar(11)
  rate       Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  invoices   Invoice[]
  Membership Membership[]
  Coupon     Coupon[]
}

model SupportTicket {
  id             Int                     @id @default(autoincrement())
  subject        String
  departament    SupportDepartamentType  @default(SALES)
  status         SupportTicketStatusType @default(OPEN)
  organizationId Int?
  organization   Organization?           @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  SupportTicketMessage SupportTicketMessage[]

  @@index([organizationId])
}

model SupportTicketMessage {
  id                          Int                           @id @default(autoincrement())
  ticketId                    Int
  organizationId              Int?
  ticket                      SupportTicket                 @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  organization                Organization?                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  SupportTicketMessageContent SupportTicketMessageContent[]

  @@index([ticketId, organizationId])
}

model SupportTicketMessageContent {
  id        Int                    @id @default(autoincrement())
  messageId Int
  type      PublicationContentType @default(TEXT)
  ticket    SupportTicketMessage   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  content   String                 @db.Text
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  @@index([messageId])
}

enum SupportDepartamentType {
  BILLING
  SALES
  SUPPORT
}

enum SupportTicketStatusType {
  OPEN
  UNDER_REVIEW
  AWAITING_RESPONSE
  CLOSED
  REOPENED
  CANCELED
}

enum InvoiceModelType {
  MEMBERSHIP
  SERVICE
  ORDER
  PRODUCT
  DEPOSIT
}

enum NotificationType {
  MESSAGE
  MENTION
  FOLLOW
  ALERT
  ACCOUNT
  PUBLICATION
}

enum PublicationContentType {
  TEXT
  VIDEO
  GALLERY
  LINK
  CUSTOM
  DISCUSSION
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  COMPLETED
  DRAFT
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  EXPIRED
}

enum ScopeType {
  USER
  CLIENT
  ADMIN
  SUPERADMIN
}

enum frequencyType {
  TRIENNIALLY
  BIANNUAL
  QUARTERLY
  YEARLY
  SEMIANNUAL
  MONTHLY
  BIMONTHLY
  WEEKLY
  DAILY
  LIFETIME
}
